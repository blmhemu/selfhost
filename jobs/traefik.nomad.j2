job "traefik" {
  region      = "{{ nomad_region }}"
  datacenters = ["{{ nomad_datacenter }}"]
  type        = "service"
  group "traefik" {
    count = 1
    network {
      port "ts_http" {
        static        = 80
        host_network  = "tailscale"
      }
      port "ts_https" {
        static        = 443
        host_network  = "tailscale"
      }
      # Health check for consul. No need to expose outside
      port "ping" {
        host_network  = "localhost"
      }
      #port "metrics" { }
    }
    volume "traefik" {
      type      = "host"
      source    = "traefik"
      read_only = false
    }
    service {
      name  = "{{ nomad_lb_service }}"
      port  = "ts_https"
      tags  = [
        "traefik.enable=true",
        "traefik.http.routers.traefikdash.rule=Host(`traefik.{{ base_domain }}`)",
        "traefik.http.routers.traefikdash.service=api@internal",
      ]
      check {
        name      = "Ping"
        type      = "http"
        port      = "ping"
        path      = "/ping"
        interval  = "10s"
        timeout   = "2s"
      }
    }
    #service {
    #  name  = "{{ nomad_lb_service }}-metrics"
    #  port  = "metrics"
    #  tags  = ["metrics", "prometheus"]
    #  check {
    #    name      = "Ping"
    #    type      = "http"
    #    port      = "ping"
    #    path      = "/ping"
    #    interval  = "10s"
    #    timeout   = "2s"
    #  }
    #}
    task "traefik" {
      driver = "docker"
      config {
        image = "traefik:v2.5"
        ports = ["ts_http", "ts_https", "ping"] # Can add 'metrics' as well.
        args  = [
          # Permanent http -> https redirect
          "--entryPoints.web.address=:80",
          "--entrypoints.web.http.redirections.entryPoint.to=websecure",
          "--entrypoints.web.http.redirections.entryPoint.scheme=https",
          "--entrypoints.web.http.redirections.entrypoint.permanent=true",
          # Https
          "--entryPoints.websecure.address=:443",
          "--entryPoints.websecure.transport.lifeCycle.requestAcceptGraceTimeout=15s",
          "--entryPoints.websecure.transport.lifeCycle.graceTimeOut=15s",
          "--entryPoints.websecure.http.tls=true",
          "--entryPoints.websecure.http.tls.certResolver=porkbunresolver",
          "--entrypoints.websecure.http.tls.domains[0].main=*.{{ base_domain }}",
          "--entrypoints.websecure.http.tls.domains[0].sans=*.{{ base_domain }}",
          # TLS Certs
          "--certificatesresolvers.porkbunresolver.acme.email={{ acme_email }}",
          "--certificatesresolvers.porkbunresolver.acme.storage=/store/acme.json",
          "--certificatesresolvers.porkbunresolver.acme.dnschallenge=true",
          "--certificatesresolvers.porkbunresolver.acme.dnschallenge.provider=porkbun",
          # Ping
          "--entryPoints.ping.address=:${NOMAD_PORT_ping}",
          "--entryPoints.ping.transport.lifeCycle.requestAcceptGraceTimeout=15s",
          "--entryPoints.ping.transport.lifeCycle.graceTimeOut=15s",
          # Dashboard
          "--api=true",
          "--api.dashboard=true",
          "--pilot.dashboard=false",
          # Healthcheck
          "--ping=true",
          "--ping.entryPoint=ping",
          # Fetch service info from consul
          "--providers.consulcatalog=true",
          "--providers.consulcatalog.endpoint.address=172.17.0.1:8501",
          "--providers.consulcatalog.endpoint.scheme=https",
          "--providers.consulcatalog.endpoint.tls.ca=/etc/traefik/ssl/ca.pem",
          "--providers.consulcatalog.endpoint.tls.cert=/etc/traefik/ssl/cert.pem",
          "--providers.consulcatalog.endpoint.tls.key=/etc/traefik/ssl/key.pem",
          "--providers.consulcatalog.prefix=traefik",
          # File provider
          "--providers.file.filename=/etc/traefik/files/provider.toml",
          # Metrics
          #"--metrics.prometheus=true",
          #"--entryPoints.metrics.address=:${NOMAD_PORT_metrics}",
          #"--metrics.prometheus.entryPoint=metrics",
          # Accesslogs
          "--accesslog=false",
        ]
        volumes = [
          "local/ca.pem:/etc/traefik/ssl/ca.pem",
          "local/cert.pem:/etc/traefik/ssl/cert.pem",
          "local/key.pem:/etc/traefik/ssl/key.pem",
          "local/provider.toml:/etc/traefik/files/provider.toml"
        ]
      }
      volume_mount {
        volume      = "traefik"
        destination = "/store"
        read_only   = false
      }
      env {
        TZ                      = "{{ ntp_timezone }}"
        PORKBUN_API_KEY         = "{{ porkbun_apikey }}"
        PORKBUN_SECRET_API_KEY  = "{{ porkbun_secret_apikey }}"
      }
      template {
        data = <<EOF
{{ lookup('file', 'files/tls/consul/ca/consul-agent-ca.pem') }}
        EOF
        destination = "local/ca.pem"
      }
      template {
        data = <<EOF
{{ lookup('file', 'files/tls/consul/cli/dc1-cli-consul-0.pem') }}
        EOF
        destination = "local/cert.pem"
      }
      template {
        data = <<EOF
{{ lookup('file', 'files/tls/consul/cli/dc1-cli-consul-0-key.pem') }}
        EOF
        destination = "local/key.pem"
      }
      template {
        data = <<EOF
# Services
[tcp.services]
  [tcp.services.nomad.loadBalancer]
    [[tcp.services.nomad.loadBalancer.servers]]
      address = "nomad.service.consul:4646"
  [tcp.services.consul.loadBalancer]
    [[tcp.services.consul.loadBalancer.servers]]
      address = "consul.service.consul:8501"

# Routers
[tcp.routers]
  [tcp.routers.nomad]
    rule = "HostSNI(`nomad.{{ base_domain }}`)"
    service = "nomad"
    [tcp.routers.nomad.tls]
      passthrough = true
  [tcp.routers.consul]
    rule = "HostSNI(`consul.{{ base_domain }}`)"
    service = "consul"
    [tcp.routers.consul.tls]
      passthrough = true
        EOF
        destination = "local/provider.toml"
      }
      resources {
        cpu    = 500
        memory = 256
      }
    }
  }
}
